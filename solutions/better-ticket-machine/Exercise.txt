2.2
- der Wert 0

2.3
- bei zu wenig Geld werde ich aufgefordert mehr Money in die Maschine zu stopfen
- bei zuviel Geld passiert gar nichts (keine Rückerstattung)

2.5
- nein die Ausgabe in der Konsole ist identisch bis auf den Preis

2.6
- public class Student {}, public class LabClass {}

2.7
- TicketMachine lässt sich nicht mehr übersetzen
- kann nicht identifiziert werden
- für mich nicht verständlich was falsch ist

2.8
- beim entfernen des Wortes public aus der Klasse ensteht keine Fehlermeldung

2.9
- beim entfernen des Wortes class ensteht eine Fehlermelung

2.10
- fields: private int price, private int balance, private int total
- constructor: public TicketMachine(int cost)
- methods: public int refundBalance(), public void printTicket(), public void insertMoney(int amount), public int getBalance(), public int getPrice()

2.11
- ?

2.12
- private int count -> integer
- private Student representative -> Student
- private Server host -> Server

2.13
- private boolean alive -> boolean
- private Person tutor -> Person
- private Game game -> Game

2.12
- Student, Server, Person, Game

2.15
- die reihenfolge hat augenscheinlich keine auswirkung
- man wird auch nicht daraufhingewiesen das eine andere Reihenfolge möglich wäre 

2.16
- Ja, ein Semikolon ist wichtig.

2.17
- private int status;

2.18
- public class Student {}

2.19
- es sind zwei Parameter mit den Typen String und double

2.20
- typ String und double
- namen sind title und price

2.21
- public Pet(String petsName) {name = petsName;}

2.22
- private Date ( Sting month, int day, int year)

2.23
- getBalance: gibt die Gesamtbetrag an die bisher in den Automaten eingeworfen wurde
- getPrice: gibt den Ticketpreis an (Anfangswert)

2.24
- aktueller Gesamtbetrag der bisher in den Automaten eingeworfen wurde

2.25
- sind unabhängig von einander

2.26
- ab Zeile 105 in TicketMachine.java

2.27
- missing return statement

2.28
- bei getPrice() steht int davor und bei printTicket() steht davor void

2.29
- kein return statements
- bei beiden steht void
- Warum? Keine Ahnung.

2.31
- weil es einen Wert erwarten. siehe in den (int cost)

2.32
public void setPrice(int cost){
price = cost;}

2.33
public void increase(int points){
score = score + points;}

2.34
- es ist keine mutator-methode, weil unteranderem mutator-methoden set-methoden sind

2.35
public void discount(int amount){
amount = amount - price;}

2.39
- der Inhalt in der Klammer mit "# price cents." wird ausgegeben

2.40
- nein, der Code bezieht sich auf allgemeine Angaben und nicht auf eine bestimmte TicketMachine

2.41
- ab Zeile 110 in TicketMachine.java

2.42
- es wurden unterschiedliche Ticketpreise ausgegeben
- Warum? -> weil zwei separate TicketMachine erstellt wurden

2.43
- ab Zeile 26 in TicketMachine.java
- der Effekt das ich nicht mehr nach dem Ticketpreis gefragt werde

2.44
- ab Zeile 32 in TicketMachine.java

2.45
- ab Zeile 119 in TicketMachine.java



